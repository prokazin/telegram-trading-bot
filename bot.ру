import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
import os
import random
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

if not API_TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    exit(1)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ –±–∏–∑–Ω–µ—Å–æ–≤
users = {}
businesses = {}
orders = {}
market = {"BTC": 50000, "ETH": 3000, "AAPL": 150}
active_crisis = None

# –ö—Ä–∏–∑–∏—Å—ã
CRISES = {
    "economic_crisis": {
        "name": "üí∏ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å",
        "effect": lambda biz: 0.7,
        "message": "–í—Å–µ –±–∏–∑–Ω–µ—Å—ã -30% –¥–æ—Ö–æ–¥–∞!"
    },
    "cyber_attack": {
        "name": "üíª –ö–∏–±–µ—Ä–∞—Ç–∞–∫–∞",
        "effect": lambda biz: 0.5 if biz["type"] == "it" else 1,
        "message": "IT-–∫–æ–º–ø–∞–Ω–∏–∏ -50% –¥–æ—Ö–æ–¥–∞!"
    }
}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    try:
        user_id = message.from_user.id
        if user_id not in users:
            users[user_id] = {
                "usd": 10000,
                "portfolio": {"BTC": 0, "ETH": 0, "AAPL": 0},
                "businesses": []
            }
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")

# –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–æ–≤
async def passive_income():
    while True:
        try:
            await asyncio.sleep(3600)
            for biz_id, biz in list(businesses.items()):
                user_id = biz["user_id"]
                if user_id in users:
                    income = 100 * biz.get("level", 1)
                    users[user_id]["usd"] += income
                    try:
                        await bot.send_message(
                            user_id,
                            f"üíµ –í–∞—à –±–∏–∑–Ω–µ—Å {biz.get('type', '')} –ø—Ä–∏–Ω–µ—Å ${income}"
                        )
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ passive_income: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫—Ä–∏–∑–∏—Å–æ–≤
async def crisis_scheduler():
    global active_crisis
    while True:
        try:
            await asyncio.sleep(7200)
            crisis = random.choice(list(CRISES.values()))
            active_crisis = crisis
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –∫—Ä–∏–∑–∏—Å–µ
            for user_id in users:
                try:
                    await bot.send_message(
                        user_id,
                        f"üö® {crisis['name']}\n{crisis['message']}"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –∫—Ä–∏–∑–∏—Å–µ: {e}")
            
            await asyncio.sleep(1800)
            active_crisis = None
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫—Ä–∏–∑–∏—Å–∞
            for user_id in users:
                try:
                    await bot.send_message(
                        user_id,
                        "‚úÖ –ö—Ä–∏–∑–∏—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –î–æ—Ö–æ–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ crisis_scheduler: {e}")

if __name__ == '__main__':
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(passive_income())
        loop.create_task(crisis_scheduler())
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
