import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import random
import datetime
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
from dotenv import load_dotenv
import os
load_dotenv()
API_TOKEN = os.getenv("7839905706:AAFS6v7QPL82yj3w38C05
MztWKx5dD858mg")
bot = Bot(token=7839905706:AAFS6v7QPL82yj3w38C05
MztWKx5dD858mg)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ –±–∏–∑–Ω–µ—Å–æ–≤
users = {}
businesses = {}
orders = {}
market = {"BTC": 50000, "ETH": 3000, "AAPL": 150}
active_crisis = None

# –ö—Ä–∏–∑–∏—Å—ã
CRISES = {
    "economic_crisis": {
        "name": "üí∏ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å",
        "effect": lambda biz: 0.7,
        "message": "–í—Å–µ –±–∏–∑–Ω–µ—Å—ã -30% –¥–æ—Ö–æ–¥–∞!"
    },
    "cyber_attack": {
        "name": "üíª –ö–∏–±–µ—Ä–∞—Ç–∞–∫–∞",
        "effect": lambda biz: 0.5 if biz["type"] == "it" else 1,
        "message": "IT-–∫–æ–º–ø–∞–Ω–∏–∏ -50% –¥–æ—Ö–æ–¥–∞!"
    }
}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {"usd": 10000, "portfolio": {"BTC": 0, "ETH": 0, "AAPL": 0}, "businesses": []}
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")

# –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
async def passive_income():
    while True:
        await asyncio.sleep(3600)
        for biz in businesses.values():
            user_id = biz["user_id"]
            income = 100 * biz["level"]
            users[user_id]["usd"] += income

async def crisis_scheduler():
    global active_crisis
    while True:
        await asyncio.sleep(7200)
        crisis = random.choice(list(CRISES.values()))
        active_crisis = crisis
        await asyncio.sleep(1800)
        active_crisis = None

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(passive_income())
    loop.create_task(crisis_scheduler())
    executor.start_polling(dp, skip_updates=True)
